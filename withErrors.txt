==17033== Memcheck, a memory error detector
==17033== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==17033== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==17033== Command: ./app/Checker
==17033== 
==17033== Invalid write of size 4
==17033==    at 0x10A327: main (main.cpp:14)
==17033==  Address 0x4da8c94 is 0 bytes after a block of size 20 alloc'd
==17033==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==17033==    by 0x10ABEF: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:114)
==17033==    by 0x10AAD8: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:443)
==17033==    by 0x10A921: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:343)
==17033==    by 0x10A6F8: void std::vector<int, std::allocator<int> >::_M_range_initialize<int const*>(int const*, int const*, std::forward_iterator_tag) (stl_vector.h:1579)
==17033==    by 0x10A4E7: std::vector<int, std::allocator<int> >::vector(std::initializer_list<int>, std::allocator<int> const&) (stl_vector.h:626)
==17033==    by 0x10A309: main (main.cpp:13)
==17033== 
==17033== Conditional jump or move depends on uninitialised value(s)
==17033==    at 0x10A331: main (main.cpp:17)
==17033== 
==17033== 
==17033== HEAP SUMMARY:
==17033==     in use at exit: 0 bytes in 0 blocks
==17033==   total heap usage: 2 allocs, 2 frees, 72,724 bytes allocated
==17033== 
==17033== All heap blocks were freed -- no leaks are possible
==17033== 
==17033== Use --track-origins=yes to see where uninitialised values come from
==17033== For lists of detected and suppressed errors, rerun with: -s
==17033== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
